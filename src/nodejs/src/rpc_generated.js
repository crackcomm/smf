// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var smf = smf || {};

/**
 * @const
 * @namespace
 */
smf.rpc = smf.rpc || {};

/**
 * \brief: headers that are stored in an int
 * so they need to be inclusive. That is, you can turn on
 * many flags at the same time, i.e.: enable checksum and
 * have the payload be zlib compressed.
 *
 *
 * @enum
 */
smf.rpc.compression_flags = {
  none: 0,
  disabled: 1,
  zstd: 2,
  lz4: 3
};

/**
 * @enum
 */
smf.rpc.header_bit_flags = {
  has_payload_headers: 1
};

/**
 * \brief: header parsed by rpc engine
 * must be sizeof()'able
 * that is, must be a struct in fbs language
 *
 * layout
 * [ 8bits(compression) + 8bits(bitflags) + 16bits(session) + 32bits(size) + 32bits(checksum) + 32bits(meta) ]
 * total = 128bits == 16bytes
 *
 *
 * @constructor
 */
smf.rpc.header = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {smf.rpc.header}
 */
smf.rpc.header.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {smf.rpc.compression_flags}
 */
smf.rpc.header.prototype.compression = function() {
  return /** @type {smf.rpc.compression_flags} */ (this.bb.readInt8(this.bb_pos));
};

/**
 * @returns {smf.rpc.header_bit_flags}
 */
smf.rpc.header.prototype.bitflags = function() {
  return /** @type {smf.rpc.header_bit_flags} */ (this.bb.readInt8(this.bb_pos + 1));
};

/**
 * 16 bits for storing the actual session id.
 * used for streaming client and slot allocation
 *
 * @returns {number}
 */
smf.rpc.header.prototype.session = function() {
  return this.bb.readUint16(this.bb_pos + 2);
};

/**
 * size of the next payload
 *
 * @returns {number}
 */
smf.rpc.header.prototype.size = function() {
  return this.bb.readUint32(this.bb_pos + 4);
};

/**
 * currently we use (xxhash64 & UINT32_MAX)
 *
 * @returns {number}
 */
smf.rpc.header.prototype.checksum = function() {
  return this.bb.readUint32(this.bb_pos + 8);
};

/**
 * \brief used for sending and receiving, read carefully.
 *
 * Receiving:
 *
 * Uses the same as HTTP status - on the receiving end
 * We don't want to pay the cost of parsing a header
 * On every response as does HTTP. std::to_string and std::stol()
 * are needlesly expensive
 *
 * Sending:
 *
 * Used with the xor hash of Service::ID() ^ Service::Method::ID()
 * This is how the server multiplexer figures out what function pointer
 * to call
 *
 *
 * @returns {number}
 */
smf.rpc.header.prototype.meta = function() {
  return this.bb.readUint32(this.bb_pos + 12);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {smf.rpc.compression_flags} compression
 * @param {smf.rpc.header_bit_flags} bitflags
 * @param {number} session
 * @param {number} size
 * @param {number} checksum
 * @param {number} meta
 * @returns {flatbuffers.Offset}
 */
smf.rpc.header.createheader = function(builder, compression, bitflags, session, size, checksum, meta) {
  builder.prep(4, 16);
  builder.writeInt32(meta);
  builder.writeInt32(checksum);
  builder.writeInt32(size);
  builder.writeInt16(session);
  builder.writeInt8(bitflags);
  builder.writeInt8(compression);
  return builder.offset();
};

/**
 * \brief used for extra headers, ala HTTP
 * The use case for the core is to support
 * zipkin/google-Dapper style tracing
 *
 * @constructor
 */
smf.rpc.dynamic_header = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {smf.rpc.dynamic_header}
 */
smf.rpc.dynamic_header.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {smf.rpc.dynamic_header=} obj
 * @returns {smf.rpc.dynamic_header}
 */
smf.rpc.dynamic_header.getRootAsdynamic_header = function(bb, obj) {
  return (obj || new smf.rpc.dynamic_header).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * alows for binary search lookup
 * use with CreateVectorOfSortedTables<> instead of the CreateVector
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
smf.rpc.dynamic_header.prototype.key = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
smf.rpc.dynamic_header.prototype.value = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
smf.rpc.dynamic_header.startdynamic_header = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} keyOffset
 */
smf.rpc.dynamic_header.addKey = function(builder, keyOffset) {
  builder.addFieldOffset(0, keyOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
smf.rpc.dynamic_header.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(1, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
smf.rpc.dynamic_header.enddynamic_header = function(builder) {
  var offset = builder.endObject();
  builder.requiredField(offset, 4); // key
  return offset;
};

/**
 * @constructor
 */
smf.rpc.payload_headers = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {smf.rpc.payload_headers}
 */
smf.rpc.payload_headers.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {smf.rpc.payload_headers=} obj
 * @returns {smf.rpc.payload_headers}
 */
smf.rpc.payload_headers.getRootAspayload_headers = function(bb, obj) {
  return (obj || new smf.rpc.payload_headers).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * Headers for forward compat.
 *
 * @param {number} index
 * @param {smf.rpc.dynamic_header=} obj
 * @returns {smf.rpc.dynamic_header}
 */
smf.rpc.payload_headers.prototype.dynamicHeaders = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new smf.rpc.dynamic_header).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
smf.rpc.payload_headers.prototype.dynamicHeadersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * We need to chain the actual payload
 *
 * @returns {number}
 */
smf.rpc.payload_headers.prototype.size = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
smf.rpc.payload_headers.prototype.checksum = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns {smf.rpc.compression_flags}
 */
smf.rpc.payload_headers.prototype.compression = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? /** @type {smf.rpc.compression_flags} */ (this.bb.readInt8(this.bb_pos + offset)) : smf.rpc.compression_flags.none;
};

/**
 * @param {flatbuffers.Builder} builder
 */
smf.rpc.payload_headers.startpayload_headers = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dynamicHeadersOffset
 */
smf.rpc.payload_headers.addDynamicHeaders = function(builder, dynamicHeadersOffset) {
  builder.addFieldOffset(0, dynamicHeadersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
smf.rpc.payload_headers.createDynamicHeadersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
smf.rpc.payload_headers.startDynamicHeadersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} size
 */
smf.rpc.payload_headers.addSize = function(builder, size) {
  builder.addFieldInt32(1, size, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} checksum
 */
smf.rpc.payload_headers.addChecksum = function(builder, checksum) {
  builder.addFieldInt32(2, checksum, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {smf.rpc.compression_flags} compression
 */
smf.rpc.payload_headers.addCompression = function(builder, compression) {
  builder.addFieldInt8(3, compression, smf.rpc.compression_flags.none);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
smf.rpc.payload_headers.endpayload_headers = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * \brief, useful when the type is empty
 * i.e.: void foo();
 * rpc my_rpc { null_type MutateOnlyOnServerMethod(int); }
 *
 *
 * @constructor
 */
smf.rpc.null_type = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {smf.rpc.null_type}
 */
smf.rpc.null_type.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {smf.rpc.null_type=} obj
 * @returns {smf.rpc.null_type}
 */
smf.rpc.null_type.getRootAsnull_type = function(bb, obj) {
  return (obj || new smf.rpc.null_type).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Builder} builder
 */
smf.rpc.null_type.startnull_type = function(builder) {
  builder.startObject(0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
smf.rpc.null_type.endnull_type = function(builder) {
  var offset = builder.endObject();
  return offset;
};

// Exports for Node.js and RequireJS
this.smf = smf;
